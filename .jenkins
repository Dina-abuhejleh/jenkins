pipeline {
    agent any
   parameters {
    base64File 'file.properties'
  }
   environment {
        FILES_LIST = sh (script: "ls   '${HUDSON_HOME}'", returnStdout: true).trim()
    }
    stages {
        stage('SSH') {
          steps {
           script {  
                withFileParameter(name:'file.properties', allowNoFile: true) {
                  sh 'if [ -f "$file.properties" ]; then cat $file.properties; fi'
        }
             	def remote = [:]
                remote.name = "${IP}"
            	remote.host = "${IP}"
            	remote.allowAnyHosts = true
                remote.user = "${username}"
   		        remote.password = "${password}"
                writeFile file: "${env.BUILD_ID}.tar.gz", text: "#!/bin/bash\nfree -m | awk 'NR==2{printf \"%.2f%% \",\$3*100/\$2}' | tee ${env.BUILD_ID}.log \n echo -e '\n' >> ${env.BUILD_ID}.log \nhostname | tee -a ${env.BUILD_ID}.log \nw | tee -a ${env.BUILD_ID}.log"
                sshPut remote: remote, from: "${env.BUILD_ID}.tar.gz", into: '.'
                sshScript remote: remote, script: "${env.BUILD_ID}.tar.gz"
                def memory = sshCommand remote: remote, command: "grep -m1 '' ${env.BUILD_ID}.log | tr -d '%' "
                echo "Result: " + memory
                 if (Float.valueOf(memory) < 80.0) { 
                        error 'memory'
                    } 
                 else { 
                 
                 }       
     }
  }
} 
        
                
        
        stage('Build two concurrent jobs') {
            steps {
                script {
                    node('master&&slave') {
                    sh ' sleep 10 '   
}
                    
                        
                }    
            }
        } 
        stage('run-parallel-branches') {
          steps {
            parallel(
              a: {
               sh 'env'
              },
              b: {
             echo "FILES_LIST : ${env.FILES_LIST}"
              },
              c: {
                script {
                   echo "BUILD_NUMBER before = ${env.BUILD_NUMBER}" 
                   env.BUILD_NUMBER = "2" 
                   echo "BUILD_NUMBER after = ${env.BUILD_NUMBER}" 

              }
              }
              )
        }
 }
    }
  }
