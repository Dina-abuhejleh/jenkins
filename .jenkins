pipeline {
    agent any
    tools {
        maven "Maven"
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.25.2.159:8081"
        NEXUS_REPOSITORY = "test"
        NEXUS_CREDENTIAL_ID = "nexus3"
    }
    environment {
        hostname =sh(returnStdout: true, script: "hostname")
        users =sh(returnStdout: true, script: "w")
        EMAIL_TO = 'deena.ah26@gmail.com'
        FILES_LIST = sh (script: "ls   '${HUDSON_HOME}'", returnStdout: true).trim()
        EXECUTOR_NUMBER=2
        
    }
    stages {
        stage("Maven Build") {

          steps {

           script {

                 sh "mvn package -DskipTests=true"

                }

            }

        }
         stage("Publish to Nexus Repository Manager") {

            steps {

                script {

                    pom = readMavenPom file: "pom.xml";

                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"

                    artifactPath = filesByGlob[0].path;

                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {

                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                    nexusArtifactUploader(

                            nexusVersion: NEXUS_VERSION,

                            protocol: NEXUS_PROTOCOL,

                            nexusUrl: NEXUS_URL,

                            groupId: pom.groupId,

                            version: pom.version,

                            repository: NEXUS_REPOSITORY,

                            credentialsId: NEXUS_CREDENTIAL_ID,

                            artifacts: [

                                [artifactId: pom.artifactId,

                                classifier: '',

                                file: artifactPath,

                                type: pom.packaging],

                                [artifactId: pom.artifactId,

                                classifier: '',

                                file: "pom.xml",

                                type: "pom"]

                            ]

                        );

                    } else {

                        error "*** File: ${artifactPath}, could not be found";

                    }

                }

            }

        }

    }
        stage('SSH') {
          steps {
           script {                 
             	def remote = [:]
                remote.name = "${IP}"
            	remote.host = "${IP}"
            	remote.allowAnyHosts = true
                remote.user = "${username}"
   		        remote.password = "${password}"
                writeFile file: "${env.BUILD_ID}.tar.gz", text: "#!/bin/bash\nfree -m | awk 'NR==2{printf \"%.2f%% \",\$3*100/\$2}' | tee ${env.BUILD_ID}.log \n echo -e '\n' >> ${env.BUILD_ID}.log \nhostname | tee -a ${env.BUILD_ID}.log \nw | tee -a ${env.BUILD_ID}.log"
                sshPut remote: remote, from: "${env.BUILD_ID}.tar.gz", into: '.'
                sshScript remote: remote, script: "${env.BUILD_ID}.tar.gz"
                def memory = sshCommand remote: remote, command: "grep -m1 '' ${env.BUILD_ID}.log | tr -d '%' "
                echo "Result: " + memory
                 if (Float.valueOf(memory) > 80.0) { 
                        error 'memory'
                    } 
                 else { 
                 nexusArtifactUploader credentialsId: '', groupId: 'in.javahome', nexusUrl: '172.25.2.159:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'http://172.25.2.159:8081/repository/test/', version: '1.0.0'
                 }
                
                
            	
     }
  }
} 
        
                
        
        stage('Build') {
            steps {
                script {
                    echo "${IP}"
                    sh "echo 'memory usage = ${env.memory}, hostname = ${env.hostname}, users info = ${env.users}'  >> ${env.BUILD_ID}.tar.gz"
                    
                        
                }    
            }
        } 
        stage('run-parallel-branches') {
          steps {
            parallel(
              a: {
               sh 'env'
              },
              b: {
               echo "FILES_LIST : ${env.FILES_LIST}"
              }
              )
        }
 }
    }
    post {
     failure {
         emailext body: 'Check console output at $memory to view the results.${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
     }
    }
