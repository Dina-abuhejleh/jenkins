pipeline {
    agent any
    environment {
        memory =sh(returnStdout: true, script: "free -m | awk 'NR==2{printf \"%.2f\",\$3*100/\$2}'")
        hostname =sh(returnStdout: true, script: "hostname")
        users =sh(returnStdout: true, script: "w")
        EMAIL_TO = 'deena.ah26@gmail.com'
        FILES_LIST = sh (script: "ls   '${HUDSON_HOME}'", returnStdout: true).trim()
        EXECUTOR_NUMBER=2
        
    }
    stages {
        stage('SSH') {
          steps {
           script {                 
             	def remote = [:]
                remote.name = "${IP}"
            	remote.host = "${IP}"
            	remote.allowAnyHosts = true
                remote.user = "${username}"
   		        remote.password = "${password}"
  	            writeFile file: "${env.BUILD_ID}", text: "free -m | awk 'NR==2{printf \"%.2f\",\$3*100/\$2}'\nhostname\nw"
            	sshCommand remote: remote, command: "pwd"
     }
  }
} 
        stage('Build') {
            steps {
                script {
                    echo "${IP}"
                    sh "echo 'memory usage = ${env.memory}, hostname = ${env.hostname}, users info = ${env.users}'  >> ${env.BUILD_ID}.tar.gz"
                    if (Float.valueOf(env.memory) > 80.0) { 
                        error 'env.memory'
                    } 
                        
                }    
            }
        } 
        stage('run-parallel-branches') {
          steps {
            parallel(
              a: {
               sh 'env'
              },
              b: {
               echo "FILES_LIST : ${env.FILES_LIST}"
              }
              )
        }
 }
    }
    post {
     failure {
         emailext body: 'Check console output at $memory to view the results.${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
     }
    }
}
